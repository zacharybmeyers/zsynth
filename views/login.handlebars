<div class="login-parent">
    <h1 class="loose-text">Sign In</h1>
    <div class="login-child">
        <form id="account-form" method="get" action="http://nodejs-test-earquiz.herokuapp.com/get?">
            <label for="email" class="loose-text">Email</label>
            <input type="text" id="email" name="email" required></input>

            <label for="pswd" class="loose-text">Password</label>
            <input type="password" id="pswd" name="pswd" required></input>

            {{!-- by default: show x emoji with matching background color (blends in and leaves space) --}}
            <span id="message" style="display: inline; color: wheat;">&#10006</span>

            <input type="submit" id="submit-button" class="signupbtn" value="Sign In"></input>

            <button type="button" id="cncl-button" class="cancelbtn">Cancel</button>

        </form>
        <p id="log" class="loose-text"></p>
    </div>
</div>

{{!-- attempt logging in with oliver's service, display message to user if unsuccessful --}}
<script>

    const cancelButton = document.getElementById('cncl-button');
    cancelButton.addEventListener('click', () => document.location.href = '/home')
    const submitButton = document.getElementById('submit-button');

    const form = document.getElementById('account-form');
    form.addEventListener('submit', async function (event) {
        event.preventDefault();

        const form = event.target;
        var fd = new FormData(form);
        var email = fd.get('email')
        var pswd = fd.get('pswd')

        const log = document.getElementById('log');
        const message = document.getElementById('message'); 

        // get uid from Oliver's service
        var url = form.action + `email=${email}&password=${pswd}`
        try {
            log.style.display = 'inline-block';
            log.textContent = 'logging in, please wait...';
            cancelButton.disabled = true;
            submitButton.disabled = true;

            const response = await fetch(url);
            if (!response.ok) {
                throw Error(`${response.status} ${response.statusText}`);
            }

            // Success: read the uid response as text, store in session, redirect page
            const uid = await response.text();
            sessionStorage.setItem('userID', uid);
            sessionStorage.setItem('email', email);

            // reset login message
            log.textContent = '';
            log.style.display = 'none';
            message.style.color = 'goldenrod';
            document.location.href = '/';
            
        } catch (error) {
            console.log('Looks like there was a problem: ', error)
            // Failure: display a message and red 'x' emoji to user
            log.style.display = 'inline-block';
            log.textContent = 'invalid email/password';
            message.style.color = 'red';
            cancelButton.disabled = false;
            submitButton.disabled = false;
        }
    });

</script>